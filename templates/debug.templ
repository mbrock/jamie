package templates

import (
	"fmt"
	"jamie/db"
)

type PacketViewModel struct {
	SampleIdx         int64
	RelativeSampleIdx int64
	Timestamp         string
	Duration          string
}

type RecognitionViewModel struct {
	SampleIdx         int64
	RelativeSampleIdx int64
	Timestamp         string
	Duration          string
	Text              string
	SampleLen         int64
}

type DebugViewModel struct {
	Stream       db.Stream
	Packets      []PacketViewModel
	Recognitions []RecognitionViewModel
	EndSample    int64
}

templ Debug(viewModel DebugViewModel) {
	@layout("Debug View - Stream " + viewModel.Stream.ID) {
		<h1>Debug View - Stream { viewModel.Stream.ID }</h1>
		<h2>Stream Details</h2>
		<table>
			<tr><th>ID</th><td>{ viewModel.Stream.ID }</td></tr>
			<tr><th>Packet Seq Offset</th><td>{ fmt.Sprintf("%d", viewModel.Stream.PacketSeqOffset) }</td></tr>
			<tr><th>Sample Idx Offset</th><td>{ fmt.Sprintf("%d", viewModel.Stream.SampleIdxOffset) }</td></tr>
			<tr><th>Created At</th><td>{ fmt.Sprintf("%f", viewModel.Stream.CreatedAt) }</td></tr>
			<tr><th>Ended At</th><td>{ fmt.Sprintf("%f", viewModel.Stream.EndedAt.Float64) }</td></tr>
		</table>
		<h2>Timeline</h2>
		<svg width="100%" height="100" style="border: 1px solid #ccc;">
			@timelineSVG(viewModel)
		</svg>
		<h2>Packets</h2>
		<table>
			<tr>
				<th>Sample Index</th>
				<th>Relative Sample Index</th>
				<th>Duration</th>
				<th>Timestamp</th>
			</tr>
			for _, packet := range viewModel.Packets {
				<tr>
					<td>{ fmt.Sprintf("%d", packet.SampleIdx) }</td>
					<td>{ fmt.Sprintf("%d", packet.RelativeSampleIdx) }</td>
					<td>{ packet.Duration }</td>
					<td>{ packet.Timestamp }</td>
				</tr>
			}
		</table>
		<h2>Recognitions</h2>
		<table>
			<tr>
				<th>Sample Index</th>
				<th>Relative Sample Index</th>
				<th>Duration</th>
				<th>Timestamp</th>
				<th>Text</th>
			</tr>
			for _, recognition := range viewModel.Recognitions {
				<tr>
					<td>{ fmt.Sprintf("%d", recognition.SampleIdx) }</td>
					<td>{ fmt.Sprintf("%d", recognition.RelativeSampleIdx) }</td>
					<td>{ recognition.Duration }</td>
					<td>{ recognition.Timestamp }</td>
					<td>{ recognition.Text }</td>
				</tr>
			}
		</table>
	}
}

templ timelineSVG(viewModel DebugViewModel) {
	@timelinePackets(viewModel)
	@timelineRecognitions(viewModel)
}

templ timelinePackets(viewModel DebugViewModel) {
	if len(viewModel.Packets) > 0 {
		@mergeConsecutivePackets(viewModel)
	}
}

templ timelineRecognitions(viewModel DebugViewModel) {
	if len(viewModel.Recognitions) > 0 {
		@mergeConsecutiveRecognitions(viewModel)
	}
}

templ mergeConsecutivePackets(viewModel DebugViewModel) {
	var startIdx, endIdx int64
	startIdx = viewModel.Packets[0].SampleIdx
	for i := 1; i < len(viewModel.Packets); i++ {
		if viewModel.Packets[i].SampleIdx - viewModel.Packets[i-1].SampleIdx > 960 {
			@drawPacketRect(viewModel, startIdx, viewModel.Packets[i-1].SampleIdx)
			startIdx = viewModel.Packets[i].SampleIdx
		}
	}
	@drawPacketRect(viewModel, startIdx, viewModel.Packets[len(viewModel.Packets)-1].SampleIdx)
}

templ drawPacketRect(viewModel DebugViewModel, startIdx, endIdx int64) {
	<rect
		x={ fmt.Sprintf("%.2f%%", float64(startIdx - viewModel.Stream.SampleIdxOffset) / float64(viewModel.EndSample - viewModel.Stream.SampleIdxOffset) * 100) }
		y="0"
		width={ fmt.Sprintf("%.2f%%", float64(endIdx - startIdx) / float64(viewModel.EndSample - viewModel.Stream.SampleIdxOffset) * 100) }
		height="45"
		fill="blue"
		opacity="0.5"
	/>
}

templ mergeConsecutiveRecognitions(viewModel DebugViewModel) {
	var startIdx, endIdx int64
	startIdx = viewModel.Recognitions[0].SampleIdx
	endIdx = startIdx + viewModel.Recognitions[0].SampleLen
	for i := 1; i < len(viewModel.Recognitions); i++ {
		if viewModel.Recognitions[i].SampleIdx > endIdx {
			@drawRecognitionRect(viewModel, startIdx, endIdx)
			startIdx = viewModel.Recognitions[i].SampleIdx
		}
		endIdx = viewModel.Recognitions[i].SampleIdx + viewModel.Recognitions[i].SampleLen
	}
	@drawRecognitionRect(viewModel, startIdx, endIdx)
}

templ drawRecognitionRect(viewModel DebugViewModel, startIdx, endIdx int64) {
	<rect
		x={ fmt.Sprintf("%.2f%%", float64(startIdx - viewModel.Stream.SampleIdxOffset) / float64(viewModel.EndSample - viewModel.Stream.SampleIdxOffset) * 100) }
		y="50"
		width={ fmt.Sprintf("%.2f%%", float64(endIdx - startIdx) / float64(viewModel.EndSample - viewModel.Stream.SampleIdxOffset) * 100) }
		height="45"
		fill="green"
		opacity="0.5"
	/>
}
