package aiderdoc

import "node.town/http"

templ EntriesTemplate(articles []Article) {
	@http.RootTemplate("Aider Chronicle") {
		<style>
			.article {
				margin-bottom: 2.6rem;
				padding-left: 1rem;
			}
			.section {
				margin-bottom: 1.3rem;
			}
			.entry {
				display: flex;
				align-items: baseline;
				margin-bottom: .5rem;
			}
			.timestamp {
				font-size: 0.8rem;
				opacity: 0.5;
				text-align: right;
				padding-right: 1rem;
				width: 3rem;
			}
			.content {
				white-space: pre-wrap;
				flex: 1;
			}
			.date {
				font-size: 0.8rem;
				line-height: calc(1.3rem * 3);
				opacity: 0.5;
				text-align: center;
			}
			.date.hidden {
				display: none;
			}
			tt {
				font-weight: 400;
				margin: 0 5px;
				color: darkseagreen;
				letter-spacing: -0.6px;
			}
			.ask .content {
				font-style: italic;
				opacity: 0.8;
				font-family: 'Big Caslon', serif;
			}
			.ask .content::before {
				content: "ASK";
			}
			.ask .content::before, .add .content::before, .run .content::before, .drop .content::before, .code .content::before {
				font-style: normal;
				font-family: 'DM Mono', monospace;
				margin-right: .5rem;
				font-weight: 600;
				font-size: 0.7rem;
				display: inline-block;
				width: 3rem;
				text-align: right;
			}
			.add .content::before {
				content: "ADD";
			}
			.run .content::before {
				content: "RUN";
			}
			.drop .content::before {
				content: "DROP";
			}
			.code .content::before {
				content: "CODE";
			}
			.run {
				font-family: 'DM Mono', monospace;
			}
			.undo .content, .clear .content {
				font-family: 'DM Mono', monospace;
				text-transform: uppercase;
				font-size: 0.7rem;
				font-weight: bold;
				text-align: center;
			}
			.undo .timestamp, .clear .timestamp, .add .timestamp, .drop .timestamp {
				display: none;
			}
			.undo, .clear {
				margin: 1.3rem 0;
			}

			@media (prefers-color-scheme: dark) {
				.timestamp {
					color: #aaa;
				}
			}
		</style>
		for _, article := range articles {
			@articleTemplate(article)
		}
	}
}

templ articleTemplate(article Article) {
	<div class="article">
		<div class={ "date", templ.KV("hidden", !article.NewDay) }>{ article.StartTime.Format("Monday, 2 January") }</div>
		for _, section := range article.Sections {
			@sectionTemplate(section)
		}
	</div>
}

templ sectionTemplate(section Section) {
	<div class="section">
		for _, entry := range section.Entries {
			@entryTemplate(entry)
		}
	</div>
}

templ entryTemplate(entry Entry) {
	<div class={ "entry", templ.KV("ask", entry.Type == EntryTypeAsk), templ.KV("run", entry.Type == EntryTypeRun), templ.KV("undo", entry.Type == EntryTypeUndo), templ.KV("clear", entry.Type == EntryTypeClear), templ.KV("add", entry.Type == EntryTypeAdd), templ.KV("drop", entry.Type == EntryTypeDrop), templ.KV("code", entry.Type == EntryTypeNormal) }>
		<div class="timestamp">{ entry.Timestamp.Format("15:04") }</div>
		<div class="content">
			for _, span := range entry.Content {
				if span.IsCode {
					<tt>{ span.Text }</tt>
				} else {
					{ span.Text }
				}
			}
		</div>
	</div>
}
