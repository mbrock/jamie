package aiderdoc

import "node.town/http"

templ EntriesTemplate(articles []Article) {
	@http.RootTemplate("Aider Chronicle") {
		<style>
			.article {
				margin-bottom: 2.6rem;
				padding-left: 1rem;
			}
			.section {
				margin-bottom: 1.3rem;
			}
			.entry {
				display: flex;
				align-items: baseline;
				margin-bottom: .5rem;
			}
			.timestamp {
				font-size: 0.8rem;
				opacity: 0.5;
				text-align: right;
				padding-right: 1rem;
				width: 3rem;
			}
			.content {
				white-space: pre-wrap;
				flex: 1;
			}
			.date {
				font-size: 0.8rem;
				line-height: calc(1.3rem * 3);
				opacity: 0.5;
				text-align: center;
			}
			.date.hidden {
				display: none;
			}
			tt {
				font-weight: 400;
				margin: 0 5px;
				color: darkseagreen;
				letter-spacing: -0.6px;
			}
			.ask, .run {
				font-weight: bold;
				color: #4a86e8;
			}
			.undo, .clear {
				font-variant: small-caps;
				color: #999;
			}

			@media (prefers-color-scheme: dark) {
				.timestamp {
					color: #aaa;
				}
				.ask, .run {
					color: #7baaf7;
				}
				.undo, .clear {
					color: #666;
				}
			}
		</style>
		for _, article := range articles {
			@articleTemplate(article)
		}
	}
}

templ articleTemplate(article Article) {
	<div class="article">
		<div class={ "date", templ.KV("hidden", !article.NewDay) }>{ article.StartTime.Format("Monday, 2 January") }</div>
		for _, section := range article.Sections {
			@sectionTemplate(section)
		}
	</div>
}

templ sectionTemplate(section Section) {
	<div class="section">
		for _, entry := range section.Entries {
			@entryTemplate(entry)
		}
	</div>
}

templ entryTemplate(entry Entry) {
	<div class="entry">
		<div class="timestamp">{ entry.Timestamp.Format("15:04") }</div>
		<div class={ "content", templ.KV("ask", entry.Type == EntryTypeAsk), templ.KV("run", entry.Type == EntryTypeRun), templ.KV("undo", entry.Type == EntryTypeUndo), templ.KV("clear", entry.Type == EntryTypeClear) }>
			if entry.Type == EntryTypeAsk {
				/ask 
			} else if entry.Type == EntryTypeRun {
				/run 
			}
			for _, span := range entry.Content {
				if span.IsCode {
					<tt>{ span.Text }</tt>
				} else {
					{ span.Text }
				}
			}
		</div>
	</div>
}
