package aiderdoc

import "node.town/http"

templ EntriesTemplate(articles []Article) {
	@http.RootTemplate("Aider Chronicle") {
		<style>
			body {
				font-family: sans-serif;
				line-height: 1.6;
				color: #333;
				max-width: 800px;
				margin: 0 auto;
				padding: 20px;
			}
			.article {
				margin-bottom: 40px;
				display: flex;
				flex-direction: column;
				gap: 1rem;
			}
			.date {
				font-size: 1.2em;
				font-weight: bold;
				margin-bottom: 20px;
				color: #666;
			}
			.section {
				display: flex;
				align-items: baseline;
			}
			.section-timestamp {
				font-family: 'DM Mono', monospace;
				font-size: 0.8em;
				color: #888;
				margin-bottom: 10px;
			}
			.section-content {
				padding: 0 15px;
			}
			.entry {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
				margin-right: 1rem;
			}
			.entry-type {
				font-family: 'DM Mono', monospace;
				font-weight: 600;
				font-size: 0.9em;
				margin-right: 5px;
			}
			.entry-content {
				white-space: pre-wrap;
			}
			.keyboard .entry-content {
				font-family: 'DM Mono', monospace;
			}
			.voice .entry-content {
				font-style: italic;
			}
			.voice .entry-content::before {
                content: "“";
            }
            .voice .entry-content::after {
                content: "”";
            }
            .keyboard .entry-content::before {
                content: "$ ";
            }

			tt {
				background-color: #e6e6e6;
				padding: 2px 4px;
				border-radius: 3px;
			}
		</style>
		for _, article := range articles {
			@articleTemplate(article)
		}
	}
}

templ articleTemplate(article Article) {
	<div class="article">
		if article.NewDay {
			<div class="date">{ article.StartTime.Format("Monday, 2 January") }</div>
		}
		for _, section := range article.Sections {
			@sectionTemplate(section)
		}
	</div>
}

templ sectionTemplate(section Section) {
	<div class="section">
		<div class="section-timestamp">{ section.StartTime.Format("15:04") }</div>
		<div class="section-content">
			for _, entry := range section.Entries {
				@entryTemplate(entry)
			}
		</div>
	</div>
}

templ entryTemplate(entry Entry) {
	<span class={ "entry", templ.KV("ask", entry.InputMode == InputModeAsk), templ.KV("code", entry.InputMode == InputModeCode), templ.KV("voice", entry.IsVoice), templ.KV("keyboard", !entry.IsVoice) }>
		if entry.Type != EntryTypeNormal && entry.Type != EntryTypeClear {
			<span class="entry-type">
				switch entry.Type {
					case EntryTypeAsk:
						{ "ask" }
					case EntryTypeRun:
						{ "run" }
					case EntryTypeUndo:
						{ "️undo" }
					case EntryTypeAdd:
						{ "add" }
					case EntryTypeDrop:
						{ "drop" }
				}
			</span>
		}
		if entry.Type != EntryTypeClear {
			<span class="entry-content">
				for _, span := range entry.Content {
					if span.IsCode {
						<tt>{ span.Text }</tt>
					} else {
						{ span.Text }
					}
				}
			</span>
		}
	</span>
}
