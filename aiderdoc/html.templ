package aiderdoc

import "node.town/http"

templ EntriesTemplate(articles []Article) {
	@http.RootTemplate("Aider Chronicle") {
		<style>
			table {
				width: 100%;
				border-collapse: collapse;
			}
			td {
				padding: 5px;
				vertical-align: top;
			}
			.timestamp {
				font-size: 0.8rem;
				opacity: 0.5;
				text-align: right;
				width: 3rem;
				white-space: nowrap;
			}
			.entry-type {
				font-family: 'DM Mono', monospace;
				font-weight: 600;
				font-size: 0.7rem;
				width: 3rem;
				text-align: right;
			}
			.content {
				white-space: pre-wrap;
			}
			.date {
				font-size: 0.8rem;
				opacity: 0.5;
				text-align: center;
				padding: 10px 0;
			}
			tt {
				font-weight: 400;
				margin: 0 5px;
				color: darkseagreen;
				letter-spacing: -0.6px;
			}
			.ask .content {
				font-style: italic;
				opacity: 0.8;
				font-family: 'Big Caslon', serif;
			}
			.run {
				font-family: 'DM Mono', monospace;
			}
			.undo .content, .clear .content {
				font-family: 'DM Mono', monospace;
				text-transform: uppercase;
				font-size: 0.7rem;
				font-weight: bold;
				text-align: center;
			}

			@media (prefers-color-scheme: dark) {
				.timestamp {
					color: #aaa;
				}
			}
		</style>
		<table>
			for _, article := range articles {
				@articleTemplate(article)
			}
		</table>
	}
}

templ articleTemplate(article Article) {
	if article.NewDay {
		<tr>
			<td colspan="3" class="date">{ article.StartTime.Format("Monday, 2 January") }</td>
		</tr>
	}
	for _, section := range article.Sections {
		@sectionTemplate(section)
	}
}

templ sectionTemplate(section Section) {
	for _, entry := range section.Entries {
		@entryTemplate(entry)
	}
}

templ entryTemplate(entry Entry) {
	<tr class={ templ.KV("ask", entry.Type == EntryTypeAsk), templ.KV("run", entry.Type == EntryTypeRun), templ.KV("undo", entry.Type == EntryTypeUndo), templ.KV("clear", entry.Type == EntryTypeClear), templ.KV("add", entry.Type == EntryTypeAdd), templ.KV("drop", entry.Type == EntryTypeDrop), templ.KV("code", entry.Type == EntryTypeNormal) }>
		<td class="timestamp">{ entry.Timestamp.Format("15:04") }</td>
		<td class="entry-type">
			switch entry.Type {
				case EntryTypeAsk:
					{ "ASK" }
				case EntryTypeRun:
					{ "RUN" }
				case EntryTypeUndo:
					{ "UNDO" }
				case EntryTypeClear:
					{ "CLEAR" }
				case EntryTypeAdd:
					{ "ADD" }
				case EntryTypeDrop:
					{ "DROP" }
				default:
					{ "CODE" }
			}
		</td>
		<td class="content">
			for _, span := range entry.Content {
				if span.IsCode {
					<tt>{ span.Text }</tt>
				} else {
					{ span.Text }
				}
			}
		</td>
	</tr>
}
