package aiderdoc

import "node.town/http"

templ EntriesTemplate(articles []Article) {
	@http.RootTemplate("Aider Chronicle") {
		<style>
			body {
				line-height: 1.6;
				color: #333;
				margin: 0 auto;
				padding: 20px;
			}
			.article {
				margin-bottom: 40px;
				display: flex;
				flex-direction: column;
				column-gap: 2rem;
				row-gap: .5rem;
				align-items: baseline;
			}
			.date {
				font-size: 1.2em;
				font-weight: bold;
				margin-bottom: 20px;
				color: #666;
				width: 100%;
			}
			.entry {
			    display: flex;
			    align-items: baseline;
			    padding: 0 .5rem;

			    max-width: 62ch;
			}
			.entry-timestamp {
                font-size: 0.8em;
				opacity: 0.4;
				margin-right: 10px;
			}
			.entry-type {
                font-weight: bold;
				font-size: 0.9em;
				margin-right: 5px;
				font-family: 'DM Mono', monospace;
			}
			.entry-content {
				white-space: pre-wrap;
			}
			.keyboard .entry-content {
				font-family: 'DM Mono', monospace;
			}
			.voice .entry-content {
				font-style: italic;
			}

            .voice .entry-content {
                font-style: italic;
            }

			tt {
				padding: 0px 4px;
				letter-spacing: -.5px;
    			}
		</style>
		for _, article := range articles {
			@articleTemplate(article)
		}
	}
}

templ articleTemplate(article Article) {
	<div class="article">
		if article.NewDay {
			<div class="date">{ article.StartTime.Format("Monday, 2 January") }</div>
		}
		for _, entry := range article.Entries {
			@entryTemplate(entry)
		}
	</div>
}

templ entryTemplate(entry Entry) {
	<span class={ "entry", templ.KV("ask", entry.Type == EntryTypeAsk), templ.KV("code", entry.Type == EntryTypeCode), templ.KV("voice", entry.IsVoice) }>
		<span class="entry-timestamp">{ entry.Timestamp.Format("15:04") }</span>
		if entry.Type != EntryTypeClear {
			<span class="entry-type">
				switch entry.Type {
					case EntryTypeAsk:
						{ "?" }
					case EntryTypeRun:
						{ "$" }
					case EntryTypeUndo:
						{ "undo" }
					case EntryTypeAdd:
						{ "+" }
					case EntryTypeDrop:
						{ "-" }
					case EntryTypeCode:
					    { ">" }
				}
			</span>
		}
		if entry.Type != EntryTypeClear && entry.Type != EntryTypeUndo {
			<span class="entry-content">
				for _, span := range entry.Content {
                    if span.IsCode {
                        <tt>{ span.Text }</tt>
                    } else {
                        { span.Text }
                    }
                }
			</span>
		}
	</span>
}
