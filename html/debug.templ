package html

import (
	"context"
	"fmt"
	"io"
	"jamie/db"
)

type PacketViewModel struct {
	SampleIdx         int64
	RelativeSampleIdx int64
	Timestamp         string
	Duration          string
}

type RecognitionViewModel struct {
	SampleIdx         int64
	RelativeSampleIdx int64
	Timestamp         string
	Duration          string
	Text              string
	SampleLen         int64
}

type DebugViewModel struct {
	Stream       db.Stream
	Packets      []PacketViewModel
	Recognitions []RecognitionViewModel
	EndSample    int64
}

templ Debug(viewModel DebugViewModel) {
	@layout("Debug View - Stream " + viewModel.Stream.ID) {
		<style>
			svg text {
				font-family: Arial, sans-serif;
				font-size: 10px;
				opacity: 0;
				transition: opacity 0.2s;
			}
			svg rect {
				transition: opacity 0.2s;
			}
			svg rect:hover {
				opacity: 0.7;
			}
			svg g:hover text {
				opacity: 1;
			}
		</style>
		<h1 class="text-3xl font-bold mb-6">Debug View - Stream { viewModel.Stream.ID }</h1>
		<h2 class="text-2xl font-bold mt-8 mb-4">Stream Details</h2>
		<div class="overflow-x-auto">
			<table class="w-full bg-white shadow-md rounded-lg overflow-hidden">
				<tbody>
					<tr class="border-b"><th class="px-4 py-2 bg-gray-200 text-left">ID</th><td class="px-4 py-2">{ viewModel.Stream.ID }</td></tr>
					<tr class="border-b"><th class="px-4 py-2 bg-gray-200 text-left">Packet Seq Offset</th><td class="px-4 py-2">{ fmt.Sprintf("%d", viewModel.Stream.PacketSeqOffset) }</td></tr>
					<tr class="border-b"><th class="px-4 py-2 bg-gray-200 text-left">Sample Idx Offset</th><td class="px-4 py-2">{ fmt.Sprintf("%d", viewModel.Stream.SampleIdxOffset) }</td></tr>
					<tr class="border-b"><th class="px-4 py-2 bg-gray-200 text-left">Created At</th><td class="px-4 py-2">{ fmt.Sprintf("%f", viewModel.Stream.CreatedAt) }</td></tr>
					<tr><th class="px-4 py-2 bg-gray-200 text-left">Ended At</th><td class="px-4 py-2">{ fmt.Sprintf("%f", viewModel.Stream.EndedAt.Float64) }</td></tr>
				</tbody>
			</table>
		</div>
		<h2 class="text-2xl font-bold mt-8 mb-4">Timeline</h2>
		<div class="border border-gray-300 p-2 rounded-lg">
			<svg width="100%" height="100">
				@timelineSVG(viewModel)
			</svg>
		</div>
		<h2 class="text-2xl font-bold mt-8 mb-4">Recognitions</h2>
		<div class="overflow-x-auto">
			<table class="w-full bg-white shadow-md rounded-lg overflow-hidden">
				<thead class="bg-gray-200">
					<tr>
						<th class="px-4 py-2">Sample Index</th>
						<th class="px-4 py-2">Relative Sample Index</th>
						<th class="px-4 py-2">Duration</th>
						<th class="px-4 py-2">Timestamp</th>
						<th class="px-4 py-2">Text</th>
					</tr>
				</thead>
				<tbody>
					for _, recognition := range viewModel.Recognitions {
						<tr class="border-b hover:bg-gray-50">
							<td class="px-4 py-2">{ fmt.Sprintf("%d", recognition.SampleIdx) }</td>
							<td class="px-4 py-2">{ fmt.Sprintf("%d", recognition.RelativeSampleIdx) }</td>
							<td class="px-4 py-2">{ recognition.Duration }</td>
							<td class="px-4 py-2">{ recognition.Timestamp }</td>
							<td class="px-4 py-2">{ recognition.Text }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}

templ timelineSVG(viewModel DebugViewModel) {
	@timelinePackets(viewModel)
	@timelineRecognitions(viewModel)
}

templ timelinePackets(viewModel DebugViewModel) {
	if len(viewModel.Packets) > 0 {
		@mergeConsecutivePackets(viewModel)
	}
}

templ timelineRecognitions(viewModel DebugViewModel) {
	if len(viewModel.Recognitions) > 0 {
		@mergeConsecutiveRecognitions(viewModel)
	}
}

func mergeConsecutivePackets(viewModel DebugViewModel) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		startIdx := viewModel.Packets[0].SampleIdx
		for i := 1; i < len(viewModel.Packets); i++ {
			if viewModel.Packets[i].SampleIdx-viewModel.Packets[i-1].SampleIdx > 960 {
				err = drawPacketRect(viewModel, startIdx, viewModel.Packets[i-1].SampleIdx).Render(ctx, w)
				if err != nil {
					return err
				}
				startIdx = viewModel.Packets[i].SampleIdx
			}
		}
		return drawPacketRect(viewModel, startIdx, viewModel.Packets[len(viewModel.Packets)-1].SampleIdx).Render(ctx, w)
	})
}

func drawPacketRect(viewModel DebugViewModel, startIdx, endIdx int64) templ.Component {
	x := float64(startIdx-viewModel.Stream.SampleIdxOffset) / float64(viewModel.EndSample-viewModel.Stream.SampleIdxOffset) * 100
	width := float64(endIdx-startIdx) / float64(viewModel.EndSample-viewModel.Stream.SampleIdxOffset) * 100
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		_, err = io.WriteString(w, fmt.Sprintf(`<rect x="%.2f%%" y="0" width="%.2f%%" height="45" fill="blue" opacity="0.5" />`, x, width))
		return err
	})
}

func mergeConsecutiveRecognitions(viewModel DebugViewModel) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		startIdx := viewModel.Recognitions[0].SampleIdx
		endIdx := startIdx + viewModel.Recognitions[0].SampleLen
		text := viewModel.Recognitions[0].Text
		for i := 1; i < len(viewModel.Recognitions); i++ {
			if viewModel.Recognitions[i].SampleIdx > endIdx {
				err = drawRecognitionRect(viewModel, startIdx, endIdx, text).Render(ctx, w)
				if err != nil {
					return err
				}
				startIdx = viewModel.Recognitions[i].SampleIdx
				text = viewModel.Recognitions[i].Text
			} else {
				text += " " + viewModel.Recognitions[i].Text
			}
			endIdx = viewModel.Recognitions[i].SampleIdx + viewModel.Recognitions[i].SampleLen
		}
		return drawRecognitionRect(viewModel, startIdx, endIdx, text).Render(ctx, w)
	})
}

func drawRecognitionRect(viewModel DebugViewModel, startIdx, endIdx int64, text string) templ.Component {
	x := float64(startIdx-viewModel.Stream.SampleIdxOffset) / float64(viewModel.EndSample-viewModel.Stream.SampleIdxOffset) * 100
	width := float64(endIdx-startIdx) / float64(viewModel.EndSample-viewModel.Stream.SampleIdxOffset) * 100
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		_, err = io.WriteString(w, fmt.Sprintf(`<g>
			<rect x="%.2f%%" y="50" width="%.2f%%" height="45" fill="green" opacity="0.5"/>
			<text x="%.2f%%" y="70" font-size="10" fill="black">%s</text>
		</g>`, x, width, x, text))
		return err
	})
}
